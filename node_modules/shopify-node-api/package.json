{
  "_from": "shopify-node-api",
  "_id": "shopify-node-api@1.10.0",
  "_inBundle": false,
  "_integrity": "sha512-UqrdmFfUE44r9CUBX9n69pq722yvB7qryjzjvDHDzILUw+aVLLi+tltHdoW9XCPtBN3YFXSJmJS1aelTkJMZRg==",
  "_location": "/shopify-node-api",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "shopify-node-api",
    "fetchSpec": "latest",
    "name": "shopify-node-api",
    "raw": "shopify-node-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/shopify-node-api/-/shopify-node-api-1.10.0.tgz",
  "_shasum": "d5f0f0f9a463550e051fb027ce6526a9467f4659",
  "_shrinkwrap": null,
  "_spec": "shopify-node-api",
  "_where": "/var/www/html/shopify__1/shopify-embedded-app-blog-example",
  "author": {
    "email": "chris@sinelabs.com",
    "name": "Chris Gregory",
    "url": "http://sinelabs.com/"
  },
  "bugs": {
    "url": "https://github.com/BKnights/shopify-node-api/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "json-bigint": "^0.1.4"
  },
  "deprecated": false,
  "description": "OAuth2 Module for Shopify API",
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "^1.20.1",
    "nock": "^7.5.0"
  },
  "homepage": "https://github.com/BKnights/shopify-node-api",
  "keywords": [
    "Shopify",
    "api",
    "node.js",
    "oauth2"
  ],
  "license": "MIT",
  "main": "./lib/shopify",
  "name": "shopify-node-api",
  "optionalDependencies": {},
  "readme": "shopify-node-api [![Build Status](https://travis-ci.org/christophergregory/shopify-node-api.svg?branch=master)](https://travis-ci.org/christophergregory/shopify-node-api)\n================\n\nOAuth2 Module for Shopify API\n\n[![NPM](https://nodei.co/npm/shopify-node-api.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/shopify-node-api/)\n\n## Install\n```\nnpm install -S shopify-node-api\n```\n\n## Configure Public App\n\nPublic apps are apps intended to appear in the [Shopify App Store](https://apps.shopify.com?ref=grenadeapps) and require OAuth2 to access shop data.\n\n```js\nvar shopifyAPI = require('shopify-node-api');\n\n\nvar Shopify = new shopifyAPI({\n  shop: 'MYSHOP', // MYSHOP.myshopify.com\n  shopify_api_key: '', // Your API key\n  shopify_shared_secret: '', // Your Shared Secret\n  shopify_scope: 'write_products',\n  redirect_uri: 'http://localhost:3000/finish_auth',\n  nonce: '' // you must provide a randomly selected value unique for each authorization request\n});\n\n```\n\n\n## Configure Private App\n\nPrivate apps are created for a single shop and do not appear in the shopify app store. [More info here.](https://docs.shopify.com/api/guides/introduction/creating-a-private-app)\n\n```js\nvar shopifyAPI = require('shopify-node-api');\n\n\nvar Shopify = new shopifyAPI({\n  shop: 'MYSHOP', // MYSHOP.myshopify.com\n  shopify_api_key: '', // Your API key\n  access_token: '' // Your API password\n});\n```\n\nNote: If you are building a [private Shopify app](https://docs.shopify.com/api/authentication/creating-a-private-app?ref=grenadeapps), then you don't need to go through the OAuth authentication process. You can skip ahead to the Making Requests section.\n\n\n### CAUTION!!!\n\nIf no config object is passed into the module upon initialization, an error will be thrown!\n```js\nvar Shopify = new shopifyAPI(); // No config object passed in\n```\n\nwill throw an error like:\n\n~~~\n> Error: ShopifyAPI module expects a config object\n> Please see documentation at: https://github.com/sinechris/shopify-node-api\n~~~\n\n## Usage\n\n```js\n\n// Building the authentication url\n\nvar auth_url = Shopify.buildAuthURL();\n\n// Assuming you are using the express framework\n// you can redirect the user automatically like so\nres.redirect(auth_url);\n```\n\n\n## Exchanging the temporary token for a permanent one\n\nAfter the user visits the authenticaion url they will be redirected to the location you specified in the configuration redirect_url parameter.\n\nShopify will send along some query parameters including: code (your temporary token), signature, shop, state and timestamp. This module will verify the authenticity of the request from shopify as outlined here in the [Shopify OAuth Docs](http://docs.shopify.com/api/tutorials/oauth?ref=grenadeapps)\n\n```js\n\n// Again assuming you are using the express framework\n\napp.get('/finish_auth', function(req, res){\n\n  var Shopify = new shopifyAPI(config), // You need to pass in your config here\n    query_params = req.query;\n\n  Shopify.exchange_temporary_token(query_params, function(err, data){\n    // This will return successful if the request was authentic from Shopify\n    // Otherwise err will be non-null.\n    // The module will automatically update your config with the new access token\n    // It is also available here as data['access_token']\n  });\n\n});\n\n```\n\n### Note:\n\nOnce you have initially received your access token you can instantiate a new instance at a later date like so:\n\n```js\nvar Shopify = new shopifyAPI({\n  shop: 'MYSHOP', // MYSHOP.myshopify.com\n  shopify_api_key: '', // Your API key\n  shopify_shared_secret: '', // Your Shared Secret\n  access_token: 'token', //permanent token\n});\n\n```\n\n\n\n## Making requests\n\nThis module supports GET, POST, PUT and DELETE rest verbs. Each request will return any errors, the data in JSON formation and any headers returned by the request.\n\nAn important header to take note of is **'http_x_shopify_shop_api_call_limit'**. This will let you know if you are getting close to reaching [Shopify's API call limit](http://docs.shopify.com/api/tutorials/learning-to-respect-the-api-call-limit).\n\n### API limits\n\n```js\nfunction callback(err, data, headers) {\n  var api_limit = headers['http_x_shopify_shop_api_call_limit'];\n  console.log( api_limit ); // \"1/40\"\n}\n```\n\n### GET\n\n```js\nShopify.get('/admin/products.json', query_data, function(err, data, headers){\n  console.log(data); // Data contains product json information\n  console.log(headers); // Headers returned from request\n});\n```\nThe argument `query_data` is optional. If included it will be converted to a querystring and appended to the uri.\n\n### POST\n\n```js\nvar post_data = {\n  \"product\": {\n    \"title\": \"Burton Custom Freestlye 151\",\n    \"body_html\": \"<strong>Good snowboard!</strong>\",\n    \"vendor\": \"Burton\",\n    \"product_type\": \"Snowboard\",\n    \"variants\": [\n      {\n        \"option1\": \"First\",\n        \"price\": \"10.00\",\n        \"sku\": 123\n      },\n      {\n        \"option1\": \"Second\",\n        \"price\": \"20.00\",\n        \"sku\": \"123\"\n      }\n    ]\n  }\n}\n\nShopify.post('/admin/products.json', post_data, function(err, data, headers){\n  console.log(data);\n});\n```\n\n### PUT\n\n```js\nvar put_data = {\n  \"product\": {\n    \"body_html\": \"<strong>Updated!</strong>\"\n  }\n}\n\nShopify.put('/admin/products/1234567.json', put_data, function(err, data, headers){\n  console.log(data);\n});\n```\n\n### DELETE\n\n```js\nShopify.delete('/admin/products/1234567.json', function(err, data, headers){\n  console.log(data);\n});\n```\n\n## Errors\n\nEvery response from Shopify's API is parsed and checked if it looks like an error. Three keys are used to determine an error response: 'error_description', 'error', and 'errors'. If any of these keys are found in the response, an error object will be made with the first found key's value as the error message and the response's status code as the error's code. This error object will be passed as the first parameter in the callback, along with the response JSON and response headers.\n\nIf an error occurs while making a request, the callback will be passed an error object provided from `https` as the only parameter.\n\n## OPTIONS\n\n\n### Verbose Mode\n\nBy default, shopify-node-api will automatically console.log all headers and responses. To suppress these messages, simply set verbose to false.\n\n```js\nvar config = {\n  ...\n  verbose: false\n}\n```\n\n##### Additional Verbose Options\n\nIf only a particular message type(s) is desired it may be specifically requested\nto override the standard verbose console logging.\n\nAvailable logging options:\n    * verbose_status\n    * verbose_headers\n    * verbose_api_limit\n    * verbose_body\n\n```js\nvar config = {\n  ...\n  verbose_headers: true,\n  verbose_api_limit: true\n}\n```\n\nThe above config results in only messages beginning as type __HEADER:__ and\n__API_LIMIT:__ to be logged.\n\nThis is a more ideal use case for a production server, where excessive\nbody content logging may obstruct developers from isolating meaningful server\ndata.\n\n### Verify Shopify Request\n\n**Note**: *This module has been updated to use HMAC parameter instead of the deprecated \"signature\"*.\n\nFrom the [shopify docs](http://docs.shopify.com/api/tutorials/oauth?ref=grenadeapps):\n\n\"Every request or redirect from Shopify to the client server includes a signature and hmac parameters that can be used to ensure that it came from Shopify. **The signature attribute is deprecated due to vulnerabilities in how the signature is generated.**\"\n\nThe module utilizes the *is_valid_signature* function to verify that requests coming from shopify are authentic. You can use this method in your code to verify requests from Shopify. Here is an example of its use in the this module:\n\n```js\nShopifyAPI.prototype.exchange_temporary_token = function(query_params, callback) {\n\n  // Return an error if signature is not valid\n  if (!self.is_valid_signature(query_params)) {\n    return callback(new Error(\"Signature is not authentic!\"));\n  }\n\n  // do more things...\n}\n```\n\nYou can call it from an initialized Shopify object like so\n\n```js\nShopify.is_valid_signature(query_params);\n```\n\nTo verify a Shopify signature that does not contain a state parameter, just pass true as the second argument of `is_valid_signature`:\n\n```js\nShopify.is_valid_signature(query_params, true);\n```\n*This is required when checking a non-authorization query string, for example the query string passed when the app is clicked in the user's app store*\n\n### API Call Limit Options\n\nBy default, shopify-node-api will automatically wait if you approach Shopify's API call limit. The default setting for backoff delay time is 1 second if you reach 35 out of 40 calls. If you hit the limit, Shopify will return a 429 error, and by default, this module will have a rate limit delay time of 10 seconds. You can modify these options using the following parameters:\n\n```js\nvar config = {\n  //...\n  rate_limit_delay: 10000, // 10 seconds (in ms) => if Shopify returns 429 response code\n  backoff: 35, // limit X of 40 API calls => default is 35 of 40 API calls\n  backoff_delay: 1000 // 1 second (in ms) => wait 1 second if backoff option is exceeded\n}\n```\n\nAlternatively if you are working on a Shopify Plus or Gold project or if you get increased API limits from your Shopify rep you can use 'backoff_level' to specify at what fraction of bucket capacity your app should start backing off.\n\n```js\nvar config = {\n  //...\n  rate_limit_delay: 10000, // 10 seconds (in ms) => if Shopify returns 429 response code\n  backoff_level: 0.85, // limit X/bucket size API calls => no default since 'backoff' is the default behaviour\n  backoff_delay: 1000 // 1 second (in ms) => wait 1 second if backoff option is exceeded\n}\n```\n\n# Become a Shopify App Developer\n\n[Join the Shopify Partner Program](https://app.shopify.com/services/partners/signup?ref=grenadeapps)\n\n# Testing\n\n~~~\nnpm install\nnpm test\n~~~\n\n\n# Contributing\n\nShopify has been kind enough to list this module on their [Official Documentation](http://docs.shopify.com/api/libraries/node?ref=grenadeapps). As such it is important that this module remain as bug free and up to date as possible in order to make the experience with node.js/Shopify as seamless as possible.\n\nI will continue to make updates as often as possible but we are more than happy to review any feature requests and will be accepting pull requests as well.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BKnights/shopify-node-api.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.10.0"
}
